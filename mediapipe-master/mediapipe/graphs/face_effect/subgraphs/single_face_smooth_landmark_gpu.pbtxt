# MediaPipe subgraph that detects a single face and corresponding landmarks on
# a input GPU image. The landmarks are also "smoothed" to achieve better visual
# results.

type: "SingleFaceSmoothLandmarkGpu"

# GPU image. (GpuBuffer)
input_stream: "IMAGE:input_image"

# Collection of detected/predicted faces, each represented as a list of face
# landmarks. However, the size of this collection is always 1 because of the
# single-face use in this graph. The decision to wrap the landmark list into a
# collection was made to simplify passing the result into the `FaceGeometry`
# subgraph. (std::vector<NormalizedLandmarkList>)
#
# NOTE: there will not be an output packet in the LANDMARKS stream for this
# particular timestamp if none of faces detected. However, the MediaPipe
# framework will internally inform the downstream calculators of the absence of
# this packet so that they don't wait for it unnecessarily.
output_stream: "LANDMARKS:multi_face_smooth_landmarks"

# Creates a packet to inform the `FaceLandmarkFrontGpu` subgraph to detect at
# most 1 face.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:num_faces"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:input_image"
  input_side_packet: "NUM_FACES:num_faces"
  output_stream: "LANDMARKS:multi_face_landmarks"
}

# Extracts the detected face landmark list from a collection.
node {
  calculator: "SplitNormalizedLandmarkListVectorCalculator"
  input_stream: "multi_face_landmarks"
  output_stream: "face_landmarks"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 0 end: 1 }
      element_only: true
    }
  }
}

# Extracts the input image frame dimensions as a separate packet.
node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_GPU:input_image"
  output_stream: "SIZE:input_image_size"
}

# Applies smoothing to the single face landmarks.
node {
  calculator: "LandmarksSmoothingCalculator"
  input_stream: "NORM_LANDMARKS:face_landmarks"
  input_stream: "IMAGE_SIZE:input_image_size"
  output_stream: "NORM_FILTERED_LANDMARKS:face_smooth_landmarks"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksSmoothingCalculatorOptions] {
      velocity_filter: {
        window_size: 5
        velocity_scale: 20.0
      }
    }
  }
}

# Puts the single face smooth landmarks back into a collection to simplify
# passing the result into the `FaceGeometry` subgraph.
node {
  calculator: "ConcatenateLandmarListVectorCalculator"
  input_stream: "face_smooth_landmarks"
  output_stream: "multi_face_smooth_landmarks"
}
